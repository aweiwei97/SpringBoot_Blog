<?xml version="1.0" encoding="UTF-8"?>
<!-- 该xml配置中,xml元素大小写不敏感 -->
<!-- status="off",log4j2把自身事件记录到控制台的配置，off表示不记录，其余的记录有trace，debug，info，warn，error，fatal -->
<!-- monitorInterval表示检测更改配置的时间,单位是秒,最小间隔为5秒,0或负数表示不检测 -->
<configuration name="test-cfg" status="off" monitorInterval="0">

    <!-- 常量引用 -->
    <properties>
        <!--<property name="LOG_HOME">/opt/logs/api-logs/</property>-->
       <!--CentOS 上的目录-->
        <!--"./代表项目根路径"-->
     <!-- <property name="LOG_HOME">./logs</property>   -->
        <property name="LOG_HOME">/usr/java/Tomcat/apache-tomcat-8.5.40/webapps/demo/WEB-INF/classes/logs</property>
        <property name="FORMAT">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n</property>
    </properties>
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
    <!-- appender用于接收各种日志 -->
    <appenders>
        <!-- 常见的输出到console,常用于开发环境中,默认是system_err,还有一个system_out -->
        <console name="console" target="system_out">
            <!-- appender级别的日志过滤,控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
           <thresholdFilter level="info" onMatch="accept" onMismatch="deny"/>
            <patternLayout pattern="${FORMAT}"/>
        </console>
        <!-- 常用于开发环境,把日志记录到文件中,默认追加 -->
        <file name="db_log" fileName="${LOG_HOME}/db.log" append="true">
            <patternLayout pattern="${FORMAT}"/>
        </file>
        <file name="service_log" fileName="${LOG_HOME}/info.log" append="true">
            <patternLayout pattern="${FORMAT}"/>
        </file>
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log" filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
    </appenders>

    <!-- 接收appender -->
    <loggers>
        <logger name="org.apache.http" level="WARN"/>
        <!-- Spring -->
        <logger name="org.springframework" level="WARN"/>
        <!-- mybatis loggers -->
        <logger name="com.ibatis" level="DEBUG"/>
        <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="DEBUG"/>
        <logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG"/>
        <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="DEBUG"/>
        <!-- sql loggers -->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <logger name="java.sql.Connection" level="DEBUG" additivity="true"/>
        <logger name="java.sql.Statement" level="DEBUG" additivity="true"/>
        <logger name="java.sql.PreparedStatement" level="=DEBUG" additivity="true"/>
        <logger name="java.sql.ResultSet" level="DEBUG" additivity="true"/>
        <logger name="org.apache" level="WARN"/>

        <!-- 对包进行更详细的配置 -->
        <!-- additivity表示是否追加,防止重复,因为root已经接收过一次了 -->
        <logger name="com.example.demo.dao" level="DEBUG" additivity="true">
            <appender-ref ref="db_log"/>
        </logger>
        <logger name="com.example.demo.controller" level="DEBUG" additivity="false">
            <appender-ref ref="service_log"/>
        </logger>
        <logger name="com.example.demo.service" level="DEBUG" additivity="false">
            <appender-ref ref="service_log"/>
        </logger>
        <!-- root logger,一般用于放置所有的appender -->
        <root level="DEBUG">
            <appender-ref ref="db_log"/>
            <appender-ref ref="console"/>
        </root>
    </loggers>

</configuration>